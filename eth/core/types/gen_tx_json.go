// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/dappledger/AnnChain/eth/common"
	"github.com/dappledger/AnnChain/eth/common/hexutil"
)

var _ = (*txdataMarshaling)(nil)

func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		From      string   `json:"from" gencodec:"required"`
		Timestamp *big.Int `json:"key" gencodec:"required"`
		Value     []byte   `json:"value" gencodec:"required"`

		V    *hexutil.Big `json:"v" gencodec:"required"`
		R    *hexutil.Big `json:"r" gencodec:"required"`
		S    *hexutil.Big `json:"s" gencodec:"required"`
		Hash *common.Hash `json:"hash" rlp:"-"`
	}
	var enc txdata

	enc.Timestamp = t.Timestamp
	enc.Value = t.Value
	enc.V = (*hexutil.Big)(t.V)
	enc.R = (*hexutil.Big)(t.R)
	enc.S = (*hexutil.Big)(t.S)
	enc.Hash = t.Hash
	return json.Marshal(&enc)
}

func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		From      string   `json:"from" gencodec:"required"`
		Timestamp *big.Int `json:"key" gencodec:"required"`
		Value     []byte   `json:"value" gencodec:"required"`

		V    *hexutil.Big `json:"v" gencodec:"required"`
		R    *hexutil.Big `json:"r" gencodec:"required"`
		S    *hexutil.Big `json:"s" gencodec:"required"`
		Hash *common.Hash `json:"hash" rlp:"-"`
	}
	var dec txdata

	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}

	if dec.V == nil {
		return errors.New("missing required field 'v' for txdata")
	}
	t.V = (*big.Int)(dec.V)
	if dec.R == nil {
		return errors.New("missing required field 'r' for txdata")
	}
	t.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for txdata")
	}
	t.S = (*big.Int)(dec.S)
	if dec.Hash != nil {
		t.Hash = dec.Hash
	}
	return nil
}
